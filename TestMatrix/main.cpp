//
//  main.cpp
//  TestMatrix
//
//  Created by Aziz Latipov on 09.11.17.
//  Copyright Â© 2017 Aziz L. All rights reserved.
//

#include <iostream>

int m6[6][6] = {
    {1, 4, 4, 4, 2, 1},
    {2, 0, 3, 3, 1, 5},
    {3, 1, 4, 0, 3, 2},
    {0, 4, 3, 2, 3, 5},
    {5, 1, 5, 1, 0, 4},
    {4, 0, 2, 2, 4, 3},
};

int m8[8][8] = {
    { 0, 0,  1,  1,  2,  2,  3,  3},
    { 0, 5,  1,  6,  2,  7,  3,  4},
    { 1, 2,  2,  1,  2,  3,  6,  4},
    { 2, 3,  3,  1,  3,  4, -1, -1},
    { 3, 6,  0,  3,  5,  0, -1, -1},
    { 1, 4,  4,  3, -1,  2,  7,  1},
    { 4, 7, -1,  7,  3, -1,  0,  0},
    {-1, 2,  4, -1,  5,  1,  0, -1},
};

int m9[9][9] = {
    { 0,  0,  0,  1,  1,  2,  2,  2,  1},
    { 8,  1,  7,  4,  2,  5,  6,  0,  6},
    { 8,  0, -1,  7, -1,  7, -1,  7,  3},
    { 0,  3,  4,  1, -1,  8, -1,  8,  5},
    { 8,  8,  4, -1,  7,  7,  4,  3,  1},
    { 2,  4,  1, -1, -1, -1, -1,  6,  3},
    {-1,  8,  6,  5, -1,  7,  5,  1,  0},
    { 0,  7,  6, -1,  7,  8, -1,  6,  6},
    { 0, -1, -1, -1,  8, -1, -1, -1, -1},
};

int m10[10][10] = {
    {0,  4,  1,  5,  8,  1,  7,  0,  8,  9},
    {0,  0,  0,  9, -1,  7,  1,  0,  0,  0},
    {1,  1,  6,  4,  2,  4,  5,  0, -1, -1},
    {6,  5,  1,  4, -1,  0, -1,  1, -1,  1},
    {4,  5,  8, -1, -1, -1,  3,  0, -1,  7},
    {2,  6,  3,  8,  0,  3,  3,  2,  1,  7},
    {1,  8,  6, -1, -1, -1,  1,  3, -1, -1},
    {8, -1, -1, -1,  1,  2,  7, -1,  0,  9},
    {8, -1, -1, -1, -1,  9,  9,  0, -1, -1},
    {1, -1, -1, -1, -1,  5,  1,  6, -1, -1},
};

int m12[12][12] = {
    {0,  0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0},
    {0, 11,  9, 10, 11,  8,  5,11, 3,  -1,  3,  1},
    {0, 10,  9,  1,  7,  -1,  1, 0, 5, 11, 11,  2},
    {0,  9,  7,  2,  -1,  2, 10, -1, 2,  8,  1,  3},
    {0,  8, 11,  1,  6,  -1,  -1, -1, -1, 11, 10,  4},
    {0,  7,  -1,  8,  -1, 10,  4,11, -1,  1,  -1,  5},
    {0,  6,  -1, 11,  2,  -1,  -1, -1, -1,  3, 10,  6},
    {0,  5,  -1,  1,  -1,  -1,  8, -1, 1,  -1,  7,  7},
    {0,  4,  9,  -1,  9,  -1,  5, 2, 7,  9,  -1,  8},
    {0,  3,  5,  -1,  -1, 10,  -1, -1, 0,  4, 11,  9},
    {0,  2,  -1,  7,  -1,  -1,  -1, -1, -1,  9,  -1, 10},
    {0,  1,  2,  3,  4,  5,  6, 7, 8,  9, 10, 11},
};

int m14[14][14] = {
    {0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0},
    {0,  2, 11,  -1, 5,  6,  3, -1,  9, 10, 11, 10,  -1,  1},
    {0, 11,  8,  9, -1, 10,  -1, -1,  -1, 13,  5,  -1,  7,  2},
    {0,  -1,  9, 12, 5, 12,  -1, -1,  5,  -1,  1, 13,  9,  3},
    {0,  5,  -1,  5, 9,  -1,  -1, 9,  -1,  -1,  9,  -1,  -1,  4},
    {0,  6, 10, 12, -1,  8, 13, -1,  -1,  -1,  -1,  -1,  -1,  5},
    {0,  3,  -1,  -1, -1, 13,  -1, -1, 11,  -1,  8,  -1,  3,  6},
    {0,  -1,  -1,  -1, 9,  -1,  -1, 4,  7,  -1,  -1,  6,  -1,  7},
    {0,  9,  -1,  5, -1,  -1, 11, 7,  1,  -1,  7,  -1,  -1,  8},
    {0, 10, 13,  -1, -1,  -1,  -1, -1,  -1,  8,  -1,  -1,  -1,  9},
    {0, 11,  5,  1, 9,  -1,  8, -1,  7,  -1, 11,  -1,  -1, 10},
    {0, 10,  -1, 13, -1,  -1,  -1, 6,  -1,  -1,  -1,  -1,  -1, 11},
    {0,  -1,  7,  9, -1,  -1,  3, -1,  -1,  -1,  -1,  -1,  -1, 12},
    {0,  1,  2,  3, 4,  5,  6, 7,  8,  9, 10, 11, 12, 13},
};

int m15[15][15] = {
    {8, 11, 2, 9, 0, 3, 9, 2, 2, 10, 9, 10, 7, 7, 12},
    {12, 1, 1, 8, 5, 12, 14, 0, 3, 6, 4, 10, 2, 2, 13},
    {13, 2, 10, 7, 3, 2, 3, 5, 5, 5, 0, 14, 0, 8, 13},
    {12, 5, 0, 13, 5, 12, 2, 11, 12, 6, 2, 9, 1, 5, 3},
    {14, 10, 5, 1, 3, 1, 4, 6, 6, 1, 11, 6, 7, 4, 6},
    {5, 1, 3, 12, 7, 8, 10, 9, 4, 14, 0, 14, 8, 1, 11},
    {3, 8, 6, 1, 9, 9, 2, 5, 7, 0, 6, 4, 6, 5, 8},
    {5, 11, 1, 8, 8, 8, 2, 10, 10, 13, 10, 10, 4, 10, 4},
    {0, 14, 12, 7, 0, 6, 8, 9, 4, 1, 9, 10, 12, 7, 1},
    {12, 12, 4, 13, 6, 4, 14, 0, 0, 9, 5, 2, 11, 10, 4},
    { 0, 10, 3, 4, 9, 10, 3, 3, 4, 7, 4, 13, 9, 8, 6},
    { 10, 5, 10, 6, 3, 1, 11, 9, 1, 3, 10, 7, 12, 7, 2},
    { 1, 14, 4, 12, 4, 14, 14, 7, 2, 4, 6, 13, 9, 0, 13},
    { 7, 3, 3, 3, 9, 13, 4, 12, 8, 13, 0, 3, 12, 4, 2},
    { 6, 6, 2, 10, 10, 6, 1, 9, 5, 10, 5, 3, 0, 0, 3},
};

int m16[16][16] = {
    {11, 14, 3, 3, 8, 8, 2, 1, 13, 12, 15, 4, 0, 12, 12, 1},
    {2, 7, 15, 12, 0, 3, 12, 11, 3, 12, 12, 9, 8, 7, 11, 3},
    {5, 14, 6, 13, 6, 8, 14, 3, 4, 13, 8, 5, 9, 4, 6, 12},
    {11, 5, 8, 11, 9, 5, 6, 12, 1, 2, 5, 9, 9, 0, 12, 14},
    {14, 2, 12, 4, 10, 10, 8, 15, 8, 0, 4, 1, 4, 10, 13, 15},
    {15, 6, 11, 8, 11, 1, 4, 12, 4, 9, 6, 13, 9, 2, 12, 7},
    {5, 8, 12, 15, 2, 4, 14, 10, 4, 2, 12, 8, 12, 9, 7, 12},
    {15, 2, 4, 10, 4, 9, 7, 8, 2, 13, 5, 12, 15, 1, 3, 4},
    {9, 15, 4, 12, 3, 2, 6, 7, 5, 2, 15, 1, 12, 7, 13, 11},
    {9, 2, 6, 13, 11, 13, 5, 13, 10, 11, 9, 9, 12, 13, 14, 6},
    { 12, 2, 2, 0, 4, 8, 7, 9, 11, 7, 11, 7, 14, 8, 2, 7},
    { 10, 8, 5, 5, 5, 10, 3, 15, 5, 12, 9, 2, 9, 7, 8, 6},
    { 9, 10, 6, 13, 2, 13, 7, 13, 4, 2, 4, 2, 10, 7, 10, 5},
    { 15, 15, 10, 5, 9, 13, 4, 15, 10, 13, 1, 3, 4, 9, 9, 13},
    { 3, 15, 11, 5, 13, 2, 3, 1, 4, 7, 4, 14, 14, 14, 3, 14},
    { 13, 14, 3, 6, 11, 7, 5, 5, 5, 6, 9, 9, 15, 2, 7, 2},
};

int m18[18][18] = {
    {17, 1, 9, 11, 17, 1, 9, 5, 8, 17, 4, 12, 3, 12, 2, 0, 3, 1},
    {15, 4, 2, 10, 4, 13, 3, 3, 17, 13, 9, 5, 7, 9, 5, 16, 2, 4},
    {15, 9, 7, 5, 8, 12, 15, 11, 6, 0, 9, 7, 17, 4, 9, 1, 12, 14},
    {12, 15, 15, 12, 8, 7, 15, 15, 16, 2, 11, 16, 5, 8, 7, 12, 11, 13},
    {4, 9, 4, 8, 7, 13, 15, 6, 15, 5, 6, 9, 1, 0, 4, 14, 10, 12},
    {3, 8, 10, 17, 8, 3, 15, 13, 10, 2, 6, 3, 15, 10, 10, 1, 1, 17},
    {12, 14, 6, 7, 1, 10, 16, 0, 10, 2, 15, 3, 13, 16, 9, 5, 14, 17},
    {6, 11, 11, 14, 12, 17, 0, 7, 9, 8, 9, 8, 8, 1, 5, 12, 9, 4},
    {4, 5, 5, 14, 6, 0, 15, 1, 14, 6, 4, 10, 4, 8, 2, 15, 5, 14},
    {12, 3, 3, 1, 11, 10, 10, 1, 12, 13, 11, 1, 15, 15, 4, 2, 10, 8},
    { 0, 7, 7, 15, 12, 11, 7, 14, 0, 9, 9, 3, 3, 3, 6, 7, 4, 15},
    { 15, 12, 15, 7, 5, 8, 8, 3, 4, 11, 3, 14, 1, 4, 1, 9, 17, 11},
    { 0, 4, 7, 16, 14, 16, 1, 15, 1, 7, 4, 4, 5, 0, 16, 0, 7, 2},
    { 8, 14, 5, 12, 7, 8, 6, 6, 10, 8, 15, 7, 1, 14, 12, 9, 12, 8},
    { 5, 14, 3, 7, 1, 6, 9, 4, 6, 5, 4, 13, 7, 13, 9, 12, 5, 14},
    { 1, 12, 3, 9, 0, 0, 17, 17, 12, 11, 6, 7, 17, 12, 1, 2, 17, 2},
    { 8, 8, 7, 14, 13, 9, 8, 3, 2, 17, 13, 8, 14, 12, 0, 17, 4, 0},
    { 15, 1, 17, 10, 12, 6, 15, 9, 16, 16, 11, 15, 0, 0, 5, 5, 12, 16},
};

int m20[20][20] = {
    {10, 12, 7, 3, 14, 18, 3, 12, 10, 3, 14, 10, 16, 15, 18, 9, 8, 9, 2, 19},
    {7, 14, 6, 18, 18, 8, 6, 16, 2, 0, 19, 5, 4, 6, 0, 11, 16, 4, 3, 6},
    {19, 17, 16, 15, 5, 6, 16, 13, 16, 18, 12, 15, 5, 11, 14, 3, 11, 0, 11, 13},
    {12, 10, 10, 17, 9, 11, 8, 17, 7, 3, 4, 18, 13, 12, 5, 18, 19, 1, 11, 7},
    {12, 15, 2, 17, 6, 16, 12, 17, 9, 4, 3, 1, 6, 13, 10, 7, 4, 10, 5, 3},
    {14, 1, 1, 19, 5, 6, 17, 16, 0, 0, 3, 4, 15, 6, 13, 14, 14, 5, 11, 3},
    {1, 14, 17, 0, 0, 7, 19, 16, 18, 16, 0, 4, 17, 13, 3, 15, 12, 12, 11, 4},
    {12, 7, 8, 19, 13, 1, 13, 7, 18, 5, 3, 12, 11, 0, 12, 3, 19, 3, 0, 17},
    {0, 12, 1, 9, 5, 16, 4, 17, 8, 8, 1, 0, 15, 1, 0, 8, 14, 5, 7, 13},
    {2, 10, 17, 14, 10, 1, 17, 10, 4, 9, 19, 4, 1, 13, 14, 7, 9, 10, 16, 10},
    { 18, 10, 10, 13, 11, 2, 13, 6, 0, 1, 11, 2, 3, 8, 16, 6, 9, 6, 8, 13},
    { 7, 7, 10, 9, 12, 4, 8, 2, 14, 16, 4, 13, 6, 14, 18, 10, 9, 4, 16, 9},
    { 5, 19, 3, 0, 7, 12, 6, 8, 18, 14, 13, 17, 2, 3, 6, 14, 7, 6, 8, 14},
    { 3, 12, 19, 1, 19, 17, 11, 0, 13, 19, 1, 18, 10, 4, 11, 17, 16, 17, 17, 6},
    { 12, 11, 16, 6, 14, 2, 12, 14, 1, 13, 8, 16, 5, 19, 17, 16, 8, 1, 8, 2},
    { 12, 1, 12, 3, 6, 3, 0, 14, 1, 10, 13, 5, 1, 9, 11, 7, 3, 3, 1, 4},
    { 16, 1, 12, 14, 12, 10, 2, 1, 3, 3, 3, 15, 4, 7, 18, 2, 11, 11, 17, 4},
    { 1, 2, 9, 14, 11, 0, 1, 6, 15, 15, 3, 12, 8, 15, 18, 1, 17, 12, 14, 0},
    { 15, 9, 8, 0, 16, 6, 2, 7, 17, 11, 11, 10, 13, 12, 4, 16, 12, 6, 3, 8},
    { 13, 18, 12, 1, 13, 2, 14, 3, 14, 8, 15, 10, 17, 3, 10, 14, 10, 4, 13, 19},
};

int m22[22][22] = {
    {6, 0, 9, 13, 0, 2, 20, 12, 11, 20, 10, 16, 1, 20, 12, 5, 8, 10, 12, 21, 5, 8},
    {9, 0, 20, 20, 6, 0, 19, 20, 13, 1, 20, 20, 12, 19, 20, 10, 9, 9, 9, 19, 1, 8},
    {17, 13, 14, 2, 1, 4, 1, 6, 10, 8, 5, 6, 7, 11, 6, 2, 7, 19, 3, 4, 15, 13},
    {1, 13, 1, 10, 20, 8, 5, 19, 17, 1, 11, 7, 1, 10, 9, 0, 17, 20, 8, 0, 2, 15},
    {9, 9, 15, 17, 4, 16, 21, 20, 7, 0, 9, 7, 8, 6, 15, 13, 3, 8, 12, 12, 15, 11},
    {1, 3, 11, 16, 21, 20, 14, 1, 11, 21, 8, 5, 16, 13, 21, 13, 9, 5, 11, 16, 12, 17},
    {0, 3, 9, 2, 12, 19, 12, 3, 9, 11, 4, 18, 5, 1, 16, 17, 1, 4, 17, 9, 9, 9},
    {0, 6, 1, 7, 9, 10, 2, 21, 6, 0, 3, 13, 2, 13, 8, 13, 16, 17, 2, 19, 14, 6},
    {20, 6, 1, 19, 10, 16, 7, 17, 4, 5, 0, 3, 13, 9, 13, 13, 9, 17, 13, 10, 8, 14},
    {21, 17, 5, 13, 10, 7, 10, 0, 13, 7, 5, 13, 4, 15, 7, 11, 9, 9, 15, 9, 12, 4},
    { 16, 2, 17, 3, 19, 8, 11, 4, 0, 8, 19, 5, 0, 7, 11, 10, 6, 0, 17, 11, 11, 0},
    { 4, 19, 9, 11, 4, 2, 20, 17, 4, 15, 17, 21, 16, 14, 8, 4, 16, 6, 12, 13, 10, 12},
    { 19, 21, 21, 3, 19, 14, 14, 9, 12, 16, 4, 0, 6, 8, 0, 2, 1, 5, 15, 18, 4, 8},
    { 11, 10, 10, 3, 17, 20, 17, 3, 9, 14, 2, 8, 17, 21, 0, 7, 6, 13, 1, 10, 11, 5},
    { 19, 9, 6, 20, 12, 21, 15, 15, 5, 4, 3, 15, 5, 18, 12, 0, 21, 21, 14, 21, 7, 7},
    { 19, 5, 14, 3, 16, 14, 14, 3, 19, 9, 13, 3, 5, 3, 1, 20, 18, 4, 0, 20, 18, 6},
    { 14, 8, 4, 14, 7, 19, 11, 14, 2, 8, 17, 15, 10, 12, 7, 2, 15, 2, 9, 4, 6, 14},
    { 8, 5, 11, 2, 9, 11, 20, 5, 15, 13, 13, 20, 3, 20, 15, 14, 10, 17, 21, 6, 10, 9},
    { 16, 15, 11, 7, 18, 18, 12, 0, 8, 18, 5, 19, 18, 12, 7, 17, 16, 0, 8, 5, 20, 9},
    { 2, 11, 1, 10, 7, 0, 16, 15, 9, 8, 9, 18, 16, 5, 12, 4, 5, 21, 20, 8, 16, 16},
    { 18, 1, 11, 12, 0, 17, 16, 18, 4, 18, 8, 4, 6, 15, 2, 21, 6, 10, 7, 15, 4, 21},
    { 18, 17, 1, 1, 16, 21, 7, 8, 16, 4, 10, 3, 14, 10, 19, 8, 4, 21, 4, 12, 3, 9},
};

#define K 9
#define m m9
#define K2 (K*K)
#define K3 (K2*K)

static inline int X1(int k) { return k / K; }
static inline int X2(int k) { return k % K; }

void fulfill_row_with_f1_x1x2(int A[K3], const int *f1, int y, int x1, int x2);
int test_function(const int f1[3], int k_out[3]);

int main(int argc, const char * argv[])
{
    int f1[3];
    int fail_count = 0;
    for (f1[0] = 0; f1[0] < K; f1[0]++) {
        for (f1[1] = 0; f1[1] < K; f1[1]++) {
            for (f1[2] = 0; f1[2] < K; f1[2]++) { // Ğ´Ğ»Ñ ĞºĞ°Ğ¶Ğ´Ğ¾Ğ¹ Ğ»Ğ¸Ğ½ĞµĞ¹Ğ½Ğ¾Ğ¹ ÑÑĞ½ĞºÑĞ¸Ğ¸ f1

                // Ğ±ĞµÑĞµĞ¼ 3 ÑĞ¾ÑĞºĞ¸ ki = (x1, x2)
                int result_points[3];
                if (test_function(f1, result_points) == 1) {
                    printf("f1(a[0]: %d, a[1]: %d, a[2]: %d) => { ", f1[0], f1[1], f1[2]);
                    for (int i = 0; i < 3; i++) {
                        int point = result_points[i];
                        int x1 = X1(point), x2 = X2(point);
                        int y = m[x1][x2];
                        int y1 = (f1[0] * x1 + f1[1] * x2 + f1[2]) % K;
                        if (y == y1) {
                            printf("%d(%d,%d)[%d] ", point, x1, x2, y);
                        } else {
                            printf("main: ERROR\n\n\n");
                            return -1;
                        }
                    }
                    printf("}\n");
                } else {
                    printf("f1(a[0]: %d, a[1]: %d, a[2]: %d) => FAIL\n", f1[0], f1[1], f1[2]);
                    fail_count++;
                }

            }
        }
    }
    printf("fail count: %d\n", fail_count);
    return 0;
}

int check_f1_fits_points(const int *f1, int k[3]);

int test_function(const int f1[3], int k_out[3])
{
    int k[3];
    for (k[0] = 0; k[0] < K2; k[0]++) {
        for (k[1] = 0; k[1] < K2; k[1]++) {
            for(k[2] = 0; k[2] < K2; k[2]++) {

                // ÑĞ¾ÑÑĞ°Ğ²Ğ»ÑĞµĞ¼ Ğ¼Ğ°ÑÑĞ¸ÑÑ A[i,j] == 1 iff fj(ki) != f1(ki) = fu(ki)
                // i = 0,1,2 Ğ´Ğ»Ñ k[i]
                // j = Ğ¿ÑĞ¾Ğ±ĞµĞ³Ğ°ĞµĞ¼ÑÑ Ğ¿Ğ¾ Ğ²ÑĞµĞ¼ ÑÑĞ½ĞºÑĞ¸ÑĞ¼ Ğ½Ğµ ÑĞ°Ğ²Ğ½ÑĞ¼ f1
                int fits = check_f1_fits_points(f1, k);

                if (fits == 1) {
                    k_out[0] = k[0]; k_out[1] = k[1]; k_out[2] = k[2];
                    return 1;
                }
            }
        }
    }

    return 0;
}

#ifdef MINIMIZE_POINT_COUNT
int check_if_can_finish(const int *A);
#endif

int check_f1_fits_points(const int *f1, int k[3])
{
    int A[K3] = {0};
    int s = 0;
    for (int i = 0; i<3; i++) {
        int x1 = X1(k[i]), x2 = X2(k[i]);
        int y1 = (f1[0] * x1 + f1[1] * x2 + f1[2]) % K;
        int y = m[x1][x2];
        if (y1 == y) {
            s++;
            fulfill_row_with_f1_x1x2(A, f1, y, x1, x2);

#ifdef MINIMIZE_POINT_COUNT
            if (check_if_can_finish(A)) {
                for (int t = i + 1; t < 3; t++) {
                    k[t] = -1;
                }
            }
#endif
        }
    }

    if (s > 0) {
        int fits = 1;
        for (int j = 0; j < K3; j++) {
            if (A[j] != 1) {
                fits = 0;
                break;
            }
        }
        return fits;
    }
    return -1;
}

#ifdef MINIMIZE_POINT_COUNT
int check_if_can_finish(const int *A)
{
    int j;
    for (j = 0; j < K3; j++) {
        if (A[j] != 1) {
            break;
        }
    }
    return j == K3;
}
#endif

void fulfill_row_with_f1_x1x2(int A[K3], const int *f1, int y, int x1, int x2)
{
    int f2[3];
    for (f2[0] = 0; f2[0] < K; f2[0] ++) {
        for (f2[1] = 0; f2[1] < K; f2[1]++) {
            for (f2[2] = 0; f2[2] < K; f2[2]++) {
                int y2 = (f2[0] * x1 + f2[1] * x2 + f2[2]) % K;
                int j = (f2[0] * K + f2[1]) * K + f2[2];
                if (y2 != y) {
                    A[j] = 1;
                } else {
                    if (f1[0] == f2[0] && f1[1] == f2[1] && f1[2] == f2[2]) {
                        A[j] = 1;
                    }
                }
            }
        }
    }
}
